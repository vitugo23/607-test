library (tidyverse)
library(RCurl)
library(rvest)
library(rjson)
library(XML)
library(methods)
file_html <- "https://github.com/vitugo23/DATA607/blob/main/Assignments/W7_Assignment/Book_table.html"
htmlraw <- getURL(file_html)
# The HTML file loaded as class "character"
class(htmlraw)
html_df <- readHTMLTable(htmlraw,which=1)
# Convert Num_Pages column to numeric
html_df$`Book Name` <- as.numeric(html_df$`Book Name`)
# Confirm how it has been loaded, in this case as a data frame
class(html_df)
file_html <- "https://github.com/vitugo23/DATA607/blob/main/Assignments/W7_Assignment/Book_table.html"
htmlraw <- getURL(file_html)
# The HTML file loaded as class "character"
class(htmlraw)
html_df <- readHTMLTable(htmlraw,which=1)
# Convert Num_Pages column to numeric
html_df$Number_Pages <- as.numeric(html_df$Number_Pages)
html_file = getURL("https://github.com/vitugo23/DATA607/blob/main/Assignments/W7_Assignment/Book_table.html")
books.html <- readHTMLTable(html_file)
html_file = getURL("https://raw.githubusercontent.com/vitugo23/DATA607/main/Assignments/W7_Assignment/Book_table.html")
books.html <- readHTMLTable(html_file)
head(books.html)
books.html
books.html
html_file = getURL("https://raw.githubusercontent.com/vitugo23/DATA607/main/Assignments/W7_Assignment/Book_table.html")
books.html <- readHTMLTable(html_file)
books.html
html_file = getURL("https://raw.githubusercontent.com/vitugo23/DATA607/main/Assignments/W7_Assignment/Book_table.html")
books.html <- readHTMLTable(html_file)
books.html
xml_file = getURL("https://raw.githubusercontent.com/vitugo23/DATA607/main/Assignments/W7_Assignment/Book_table.xml")
books.xml <- xmlToDataFrame(xml_file)
html_df
json_file = getURL("https://raw.githubusercontent.com/vitugo23/DATA607/main/Assignments/W7_Assignment/Book_table.json")
books.json <- fromJSON(json_file)
books.json <- lapply(books.json, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
books.json<-as.data.frame(do.call("cbind", books.json))
json_file = getURL("https://raw.githubusercontent.com/vitugo23/DATA607/main/Assignments/W7_Assignment/Book_table.json")
books.json <- fromJSON(json_file)
books.json <- lapply(books.json, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
books.json<-as.data.frame(do.call("cbind", books.json))
books.json
str(books.html)
str(books.xml)
str(books.json)
library(tidyverse)
library(openintro)
library(infer)
global_monitor <- tibble(
scientist_work = c(rep("Benefits", 80000), rep("Doesn't benefit", 20000))
)
ggplot(global_monitor, aes(x = scientist_work)) +
geom_bar() +
labs(
x = "", y = "",
title = "Do you believe that the work scientists do benefit people like you?"
) +
coord_flip()
global_monitor %>%
count(scientist_work) %>%
mutate(p = n /sum(n))
global_monitor %>%
count(scientist_work) %>%
mutate(p = n /sum(n))
samp1 <- global_monitor %>%
sample_n(50)
samp1 %>%
count(scientist_work) %>%
mutate(sample = n /sum(n))
samp1 %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n))
# For use inline below
samp1_p_hat <- samp1 %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n)) %>%
filter(scientist_work == "Doesn't benefit") %>%
pull(p_hat) %>%
round(2)
samp2 <- global_monitor %>%
sample_n(50)
samp2 %>%
count(scientist_work) %>%
mutate(p_hat_ = n /sum(n))
sample_props50 <- global_monitor %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n)) %>%
filter(scientist_work == "Doesn't benefit")
ggplot(data = sample_props50, aes(x = p_hat)) +
geom_histogram(binwidth = 0.02) +
labs(
x = "p_hat (Doesn't benefit)",
title = "Sampling distribution of p_hat",
subtitle = "Sample size = 50, Number of samples = 15000"
)
ggplot(data = sample_props50, aes(x = p_hat)) +
geom_boxplot() +
labs(
x = "p_hat (Doesn't benefit)",
title = "Sampling distribution of population proportion",
subtitle = "Sample size = 50, Number of samples = 1500"
)
global_monitor %>%
sample_n(size = 50, replace = TRUE) %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n)) %>%
filter(scientist_work == "Doesn't benefit")
sample_props_small <- global_monitor %>% rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n)) %>%
filter(scientist_work == "Doesn't benefit")
sample_props_small
ggplot(data = sample_props50, aes(x = p_hat)) +
geom_histogram(binwidth = 0.02)
# This R chunk will only run in interactive mode.
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("outcome",
"Outcome of interest:",
choices = c("Benefits", "Doesn't benefit"),
selected = "Doesn't benefit"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(global_monitor),
value = 30),
numericInput("n_rep",
"Number of samples:",
min = 1,
max = 30000,
value = 15000),
hr(),
sliderInput("binwidth",
"Binwidth:",
min = 0, max = 0.5,
value = 0.02,
step = 0.005)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
textOutput("sampling_mean"),
textOutput("sampling_se")
)
)
),
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
global_monitor %>%
rep_sample_n(size = input$n_samp, reps = input$n_rep, replace = TRUE) %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n)) %>%
filter(scientist_work == input$outcome)
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
ggplot(sampling_dist(), aes(x = p_hat)) +
geom_histogram(binwidth = input$binwidth) +
xlim(0, 1) +
labs(
x = paste0("p_hat (", input$outcome, ")"),
title = "Sampling distribution of p_hat",
subtitle = paste0("Sample size = ", input$n_samp, " Number of samples = ", input$n_rep)
) +
theme(plot.title = element_text(face = "bold", size = 16))
})
ggplot(data = sample_props50, aes(x = p_hat)) +
geom_histogram(binwidth = 0.02) +
labs(
x = "p_hat (Doesn't benefit)",
title = "Sampling distribution of p_hat",
subtitle = "Sample size = 50, Number of samples = 15000"
)
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("Mean of sampling distribution = ", round(mean(sampling_dist()$p_hat), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$p_hat), 2))
})
},
options = list(height = 900)
)
set.seed(1217)
samp3 <- global_monitor %>%
sample_n(15)
samp3 %>%
count(scientist_work) %>%
mutate(samp3 = n /sum(n))
sample_props15 <- global_monitor %>% rep_sample_n(size = 15, reps = 2000, replace = TRUE) %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n)) %>%
filter(scientist_work == "Benefits")
sample_props15
ggplot(data = sample_props15, aes(x = p_hat)) +
geom_histogram(binwidth = 0.02) +
labs(
x = "Benefits",
title = "Sampling of Population Proportion")
subtitle = "Sample size = 15, Number of samples = 2000"
ggplot(data = sample_props15, aes(x = p_hat)) +
geom_histogram(binwidth = 0.02) +
labs(
x = "Benefits",
title = "Sampling of Population Proportion")
subtitle = "Sample size = 15, Number of samples = 2000"
mean(sample_props15$p_hat)
sample_props150 <- global_monitor %>%
rep_sample_n(size = 150, reps = 2000, replace = TRUE) %>%
count(scientist_work) %>%
mutate(p_hat = n /sum(n)) %>%
filter(scientist_work == "Benefits")
sample_props150
ggplot(data = sample_props150, aes(x = p_hat)) +
geom_histogram(binwidth = 0.02) +
labs(
x = "Benefits",
title = "Sampling of Population Proportion, size of 150")
mean(sample_props150$p_hat)
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
library(infer)
us_adults <- tibble(
climate_change_affects = c(rep("Yes", 62000), rep("No", 38000))
)
ggplot(us_adults, aes(x = climate_change_affects)) +
geom_bar() +
labs(
x = "", y = "",
title = "Do you think climate change is affecting your local community?"
) +
coord_flip()
us_adults %>%
count(climate_change_affects) %>%
mutate(p = n /sum(n))
n <- 60
samp <- us_adults %>%
sample_n(size = n)
us_adults %>%
count(climate_change_affects) %>%
mutate(p = n /sum(n))
samp %>%
specify(response = climate_change_affects, success = "Yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
# This R chunk will only run in interactive mode
store_ci <- function(i, n, reps, conf_level, success) {
us_adults %>%
sample_n(size = n) %>%
specify(response = climate_change_affects, success = success) %>%
generate(reps, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = conf_level) %>%
rename(
x_lower = names(.)[1],
x_upper = names(.)[2]
)
}
library(shiny)
shinyApp(
ui <- fluidPage(
h4("Confidence intervals for the proportion of US adults who think
climate change"),
h4(selectInput("success", "",
choices = c(
"is affecting their local community" = "Yes",
"is not affecting their local community" = "No"
),
selected = "Yes", width = "50%"
)),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
numericInput("n_samp",
"Sample size for a single sample from the population:",
min = 1,
max = 1000,
value = 60
),
hr(),
numericInput("n_rep",
"Number of resamples for each bootstrap confidence interval:",
min = 1,
max = 15000,
value = 1000
),
numericInput("conf_level",
"Confidence level",
min = 0.01,
max = 0.99,
value = 0.95,
step = 0.05
),
hr(),
radioButtons("n_ci",
"Number of confidence intervals:",
choices = c(10, 25, 50, 100),
selected = 50, inline = TRUE
),
actionButton("go", "Go")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("ci_plot")
)
)
),
server <- function(input, output) {
# set true p
p <- reactive(ifelse(input$success == "Yes", 0.62, 0.38))
# create df_ci when go button is pushed
df_ci <- eventReactive(input$go, {
map_dfr(1:input$n_ci, store_ci,
n = input$n_samp,
reps = input$n_rep, conf_level = input$conf_level,
success = input$success
) %>%
mutate(
y_lower = 1:input$n_ci,
y_upper = 1:input$n_ci,
capture_p = ifelse(x_lower < p() & x_upper > p(), "Yes", "No")
)
})
# plot df_ci
output$ci_plot <- renderPlot({
ggplot(df_ci()) +
geom_segment(aes(x = x_lower, y = y_lower, xend = x_upper, yend = y_upper, color = capture_p)) +
geom_point(aes(x = x_lower, y = y_lower, color = capture_p)) +
geom_point(aes(x = x_upper, y = y_upper, color = capture_p)) +
geom_vline(xintercept = p(), color = "darkgray") +
labs(
y = "", x = "Bounds of the confidence interval",
color = "Does the interval capture the true population proportion?"
) +
theme(legend.position = "bottom")
})
},
options = list(height = 700)
)
